{"version":3,"sources":["app/actions/cardActions.js","app/actions/optionActions.js","app/components/Board.jsx","app/components/Card.jsx","app/components/Combinations.jsx","app/components/Histogram.jsx","app/components/Player.jsx","app/components/PlayerName.jsx","app/components/PlayersAmount.jsx","app/components/PokerTableCard.jsx","app/container/App.jsx","app/container/CardsBlock.jsx","app/container/Options.jsx","app/container/PokerTable.jsx","app/container/Statistics.jsx","app/initialize.js","app/reducers/cardReducer.js","app/reducers/initialState.js","app/reducers/optionReducer.js","app/reducers/rootReducer.js","app/utils/calculatePokerStatistics.js","app/utils/cards.js","app/utils/changeSelection.js"],"names":[],"mappings":"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","file":"public/app.js","sourcesContent":["export const selectCard = (cardName) => ({\n  type: 'SELECT_CARD',\n  cardName\n});\n\nexport const addPokerTableCard = (cardName) => ({\n  type: 'ADD_POKER_TABLE_CARD',\n  cardName\n});\n\nexport const removePlayerCard = (cardName) => ({\n  type: 'REMOVE_PLAYER_CARD',\n  cardName\n});\n\nexport const removeBoardCard = (cardName) => ({\n  type: 'REMOVE_BOARD_CARD',\n  cardName\n});\n","import {calculatePokerStatistics} from 'utils/calculatePokerStatistics';\n\nexport const setPlayersAmount = (playersAmount) => ({\n  type: 'SET_PLAYERS_AMOUNT',\n  playersAmount\n});\n\nexport const reset = () => ({\n  type: 'RESET'\n});\n\nexport const changePlayerName = (playerId, playerName) => ({\n  type: 'CHANGE_PLAYER_NAME',\n  playerId,\n  playerName\n});\n\nexport const addPokerStatistics = () => {\n  return (dispatch, getState) => {\n    calculatePokerStatistics(getState().options.playersAmount, getState().cards.pokerTableCards).then(pokerStatistics => {\n      dispatch({type: 'ADD_POKER_STATISTICS', pokerStatistics});\n    });\n  };\n};\n","import React from 'react';\n\nimport PokerTableCard from './PokerTableCard';\n\nexport default ({cards, selectedCard, onSelectCard, removeCard}) => {\n  return <div className=\"Board\">\n    {[...Array(5)].map((x, i) =>\n      <PokerTableCard cardName={cards[`XB${i + 1}`]} selected={selectedCard} onSelect={onSelectCard} removeCard={removeCard}/>\n    )}\n  </div>\n}\n","import React from 'react'\n\nexport default React.createClass({\n  propTypes: {\n    cardName: React.PropTypes.string.isRequired,\n    isChosen: React.PropTypes.bool.isRequired,\n    addCard: React.PropTypes.func.isRequired\n  },\n\n  handleClick(cardName) {\n    this.props.isChosen ? alert('This card is already chosen.') : this.props.addCard(cardName);\n  },\n\n  render() {\n    const cardName = this.props.cardName;\n    const className = this.props.isChosen ? 'Card-chosen' : 'Card';\n    const path = `img/cards/${cardName}.png`;\n\n    return <div className={className} onClick={this.handleClick.bind(this, cardName)}>\n      <img src={path} />\n    </div>\n  }\n});\n","import React from 'react';\n\nexport default () => {\n  return <div className=\"Combinations\">\n    <div>Combinations</div>\n    <div>High Card</div>\n    <div>Pair</div>\n    <div>Two Pairs</div>\n    <div>Three of a Kind</div>\n    <div>Straight</div>\n    <div>Flush</div>\n    <div>Full House</div>\n    <div>Four of a Kind</div>\n    <div>Straight Flush</div>\n    <div>Royal Flush</div>\n  </div>\n};\n","import React from 'react';\n\nexport default React.createClass({\n  propTypes: {\n    playerName: React.PropTypes.string.isRequired,\n    histogram: React.PropTypes.array\n  },\n\n  render() {\n    return <div className=\"Histogram\">\n      <div>{this.props.playerName}</div>\n      {[...Array(10)].map((x, i) =>\n        <div>{ this.props.histogram ? this.props.histogram[i] : '-' }</div>\n      )}\n    </div>\n  }\n});\n","import React from 'react';\n\nimport PokerTableCard from './PokerTableCard';\n\nexport default ({number, playerName, cards, selectedCard, winningChances, onSelectCard, removeCard}) => {\n  const className = `Player-${number}`;\n  const cardNameFirst = cards[`XF${number}`];\n  const cardNameSecond = cards[`XS${number}`];\n\n  return <div className={className}>\n    <div className=\"Hand\">\n      <PokerTableCard cardName={cardNameFirst} selected={selectedCard} onSelect={onSelectCard} removeCard={removeCard} />\n      <PokerTableCard cardName={cardNameSecond} selected={selectedCard} onSelect={onSelectCard} removeCard={removeCard}/>\n    </div>\n    <div className=\"PlayerName\">{playerName} {winningChances}</div>\n  </div>;\n}\n","import React from 'react';\n\nexport default React.createClass({\n  propTypes: {\n    playerId: React.PropTypes.number.isRequired,\n    playerName: React.PropTypes.string.isRequired,\n    onChangePlayerName: React.PropTypes.func.isRequired\n  },\n\n  handeOnChange(playerName) {\n    const name = this.refs.playerName.value;\n    this.props.onChangePlayerName(this.props.playerId, name);\n  },\n\n  render() {\n    return <input ref=\"playerName\" type=\"text\" value={this.props.playerName} onChange={this.handeOnChange} />\n  }\n});\n","import React from 'react';\n\nconst playersAmount = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nexport default React.createClass({\n  propTypes: {\n    playersAmount: React.PropTypes.number.isRequired,\n    onPlayersAmountChange: React.PropTypes.func.isRequired\n  },\n\n  changePlayersAmount() {\n    const value = this.refs.playersAmount.value;\n    this.props.onPlayersAmountChange(value);\n  },\n\n  render() {\n    return <select ref=\"playersAmount\" value={this.props.playersAmount} onChange={this.changePlayersAmount}>\n      {playersAmount.map(amount => <option key={amount} value={amount}>{amount}</option>)}\n    </select>\n  }\n});\n","import React from 'react';\n\nexport default React.createClass({\n  propTypes: {\n    cardName: React.PropTypes.string.isRequired,\n    selected: React.PropTypes.string,\n    onSelect: React.PropTypes.func.isRequired,\n    removeCard: React.PropTypes.func.isRequired\n  },\n\n  handleClick(cardName) {\n    cardName.startsWith('X') ? this.props.onSelect(cardName) : this.props.removeCard(cardName);\n  },\n\n  render() {\n    const cardName = this.props.cardName;\n    const selectedCard = this.props.selected;\n    const isSelected = cardName === selectedCard;\n    const className = isSelected ? 'Card-selected' : (cardName.startsWith('X') ? 'Card' : 'Card-in');\n    const path = cardName.startsWith('X') ? 'img/cards/X.png' : `img/cards/${cardName}.png`;\n\n    return <div className={className} onClick={this.handleClick.bind(this, cardName)}>\n      <img src={path} />\n    </div>\n  }\n});\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {selectCard, addPokerTableCard, removeCardFromPokerTable} from 'actions/cardActions';\n\nimport CardsBlock from './CardsBlock';\nimport PokerTable from './PokerTable';\nimport Options from './Options';\nimport Statistics from './Statistics';\n\nconst App = React.createClass({\n  render() {\n    return (\n      <div className=\"Container\">\n        <div className=\"CardsAndTable\">\n          <CardsBlock selectedCard={this.props.selectedCard} addPokerTableCard={this.props.addPokerTableCard} />\n          <PokerTable selectedCard={this.props.selectedCard} onSelectCard={this.props.onSelectCard} removeCardFromPokerTable={this.props.removeCardFromPokerTable} />\n        </div>\n        <div className=\"OptionsAndStatistics\">\n          <Options />\n          <Statistics />\n        </div>\n      </div>\n    );\n  }\n});\n\nconst mapStateToProps = (state) => ({\n  selectedCard: state.cards.selectedCard\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSelectCard(cardName) {\n    dispatch(selectCard(cardName));\n  },\n\n  addPokerTableCard(cardName) {\n    dispatch(addPokerTableCard(cardName));\n  },\n\n  removeCardFromPokerTable(cardName) {\n    dispatch(removeCardFromPokerTable(cardName));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport Card from 'components/Card';\nimport {values, suits} from 'utils/cards';\n\nconst CardsBlock = ({selectedCard, chosenCards, addPokerTableCard}) => {\n  return <div className=\"CardsBlock\">\n    {suits.map(suit => {\n      return <div className=\"CardsBlock-suit\">\n        {values.map(value => {\n          const cardName = value + suit;\n          const isChosen = chosenCards.findIndex(card => card === cardName) > -1;\n          return <Card cardName={cardName} isChosen={isChosen} addCard={addPokerTableCard} />;\n        })}\n      </div>;\n    })}\n  </div>;\n};\n\nconst mapStateToProps = (state) => ({\n  chosenCards: state.cards.chosenCards\n});\n\nexport default connect(mapStateToProps)(CardsBlock);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {setPlayersAmount, reset, changePlayerName, addPokerStatistics} from 'actions/optionActions';\nimport toastr from 'toastr';\n\nimport PlayersAmount from 'components/PlayersAmount';\nimport PlayerName from 'components/PlayerName';\n\nconst Options = ({pokerStatistics, playersAmount, playerNames, onPlayersAmountChange, reset, onChangePlayerName, addStatistics}) => {\n  const amount = parseInt(playersAmount, 10);\n\n  return <div className=\"Options\">\n    <div className=\"PlayersAmount\">\n      <div className=\"SelectText\">Select the amount of players:</div>\n      <div className=\"CustomSelect\">\n        <PlayersAmount onPlayersAmountChange={onPlayersAmountChange} playersAmount={playersAmount} />\n      </div>\n    </div>\n    <input className=\"CustomButton\" type=\"button\" value=\"Count statistcs\" onClick={addStatistics} />\n    <input className=\"CustomButton\" type=\"button\" value=\"Reset\" onClick={reset} />\n    <div className=\"ChangeNameArea\">\n      {[...Array(amount)].map((x, i) =>\n        <PlayerName playerId={i} playerName={playerNames[i]} onChangePlayerName={onChangePlayerName} />\n      )}\n    </div>\n  </div>;\n};\n\nconst mapStateToProps = (state) => ({\n  playersAmount: state.options.playersAmount,\n  playerNames: state.options.playerNames,\n  pokerStatistics: state.options.pokerStatistics\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onPlayersAmountChange(playersAmount) {\n    dispatch(setPlayersAmount(playersAmount));\n  },\n\n  reset() {\n    dispatch(reset());\n  },\n\n  onChangePlayerName(playerId, playerName) {\n    dispatch(changePlayerName(playerId, playerName));\n  },\n\n  addStatistics() {\n    dispatch(addPokerStatistics());\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Options);\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport Player from 'components/Player';\nimport Board from 'components/Board';\n\nconst PokerTable = ({playersAmount, playerNames, playerCards, boardCards, selectedCard, winningChances, onSelectCard, removePlayerCard, removeBoardCard}) => {\n  const amount = parseInt(playersAmount, 10);\n\n  return <div className=\"PokerTable\">\n    {[...Array(amount)].map((x, i) =>\n      <Player number={i + 1} playerName={playerNames[i]} cards={playerCards} selectedCard={selectedCard} winningChances={winningChances[i + 1]} onSelectCard={onSelectCard} removeCard={removePlayerCard} />\n    )}\n    <Board cards={boardCards} selectedCard={selectedCard} onSelectCard={onSelectCard} removeCard={removeBoardCard} />\n  </div>;\n};\n\nconst mapStateToProps = (state) => ({\n  playersAmount: state.options.playersAmount,\n  playerNames: state.options.playerNames,\n  playerCards: state.cards.playerCards,\n  boardCards: state.cards.boardCards,\n  winningChances: state.options.winningChances\n});\n\nexport default connect(mapStateToProps)(PokerTable);\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport Histogram from 'components/Histogram';\nimport Combinations from 'components/Combinations';\n\nconst Statistics = ({playersAmount, playerNames, histograms}) => {\n  const amount = parseInt(playersAmount, 10);\n\n  return <div className=\"Statistics\">\n    <Combinations />\n    {[...Array(amount)].map((x, i) =>\n      <Histogram playerName={playerNames[i]} histogram={histograms[i]} />\n    )}\n  </div>\n};\n\nconst mapStateToProps = (state) => ({\n  playersAmount: state.options.playersAmount,\n  playerNames: state.options.playerNames,\n  histograms: state.options.histograms\n});\n\nexport default connect(mapStateToProps)(Statistics);\n","require('es6-promise').polyfill();\n\nimport ReactDOM from 'react-dom';\nimport React from 'react';\nimport {createStore, applyMiddleware} from 'redux';\nimport thunkMiddleware from 'redux-thunk';\nimport {Provider} from 'react-redux';\nimport 'jquery';\nimport 'toastr';\n\nimport rootReducer from 'reducers/rootReducer';\nimport initialState from 'reducers/initialState';\nimport App from 'container/App';\n\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunkMiddleware));\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  ReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.querySelector('#app')\n  );\n});\n","import initialState from './initialState';\nimport {changeSelection} from 'utils/changeSelection';\n\nexport default function cardReducer(state = initialState.cards, action) {\n  let playerCards;\n  let boardCards;\n  let chosenCards;\n  let selectedCard;\n  switch (action.type) {\n    case 'SELECT_CARD':\n      return Object.assign({}, state, {selectedCard: action.cardName});\n    case 'ADD_POKER_TABLE_CARD':\n      playerCards = Object.assign({}, state.playerCards);\n      boardCards = Object.assign({}, state.boardCards);\n      if(state.selectedCard.startsWith('XB')) {\n        boardCards[state.selectedCard] = action.cardName;\n      }\n      else {\n        playerCards[state.selectedCard] = action.cardName;\n      }\n      selectedCard = 'XF1';\n      chosenCards = state.chosenCards;\n      chosenCards.push(action.cardName);\n      console.log(playerCards, boardCards);\n      return Object.assign({}, state, {selectedCard: selectedCard, playerCards: playerCards, boardCards: boardCards, chosenCards: chosenCards});\n    case 'REMOVE_PLAYER_CARD':\n      playerCards = Object.assign({}, state.playerCards);\n      for (var key of Object.keys(playerCards)) {\n        if(playerCards[key] === action.cardName) {\n          playerCards[key] = key;\n          selectedCard = key;\n          break;\n        }\n      }\n      chosenCards = state.chosenCards.filter(card => card !== action.cardName);\n      return Object.assign({}, state, {selectedCard: selectedCard, playerCards: playerCards, chosenCards: chosenCards});\n    case 'REMOVE_BOARD_CARD':\n      boardCards = Object.assign({}, state.boardCards);\n      for (var key of Object.keys(boardCards)) {\n        if(boardCards[key] === action.cardName) {\n          boardCards[key] = key;\n          selectedCard = key;\n          break;\n        }\n      }\n      chosenCards = state.chosenCards.filter(card => card !== action.cardName);\n      return Object.assign({}, state, {selectedCard: selectedCard, boardCards: boardCards, chosenCards: chosenCards});\n    case 'REMOVE_CARD_FROM_POKER_TABLE':\n      const cardName = action.cardName;\n      pokerTableCards = Object.assign({}, state.pokerTableCards);\n      for (var key of Object.keys(pokerTableCards)) {\n        if(pokerTableCards[key] === cardName) {\n          pokerTableCards[key] = key;\n          selectedCard = key;\n          break;\n        }\n      }\n      chosenCards = state.chosenCards.filter(card => card !== cardName);\n      return Object.assign({}, state, {selectedCard: selectedCard, pokerTableCards: pokerTableCards, chosenCards: chosenCards})\n    default:\n      return state;\n  }\n}\n","export default {\n  cards: {\n    playerCards: {\n      'XF1': 'XF1', 'XS1': 'XS1',\n      'XF2': 'XF2', 'XS2': 'XS2',\n      'XF3': 'XF3', 'XS3': 'XS3',\n      'XF4': 'XF4', 'XS4': 'XS4',\n      'XF5': 'XF5', 'XS5': 'XS5',\n      'XF6': 'XF6', 'XS6': 'XS6',\n      'XF7': 'XF7', 'XS7': 'XS7',\n      'XF8': 'XF8', 'XS8': 'XS8',\n      'XF9': 'XF9', 'XS9': 'XS9'\n    },\n    boardCards: {\n      'XB1': 'XB1', 'XB2': 'XB2', 'XB3': 'XB3', 'XB4': 'XB4', 'XB5': 'XB5'\n    },\n    selectedCard: 'XF1',\n    chosenCards: []\n  },\n\n  options: {\n    playersAmount: 1,\n    playerNames: ['Player1', 'Player2', 'Player3', 'Player4', 'Player5', 'Player6', 'Player7', 'Player8', 'Player9'],\n    winningChances: [],\n    histograms: []\n  }\n};\n","import initialState from './initialState';\n\nexport default function optionReducer(state = initialState.options, action) {\n  let pokerTableCards;\n  let chosenCards;\n  let selectedCard;\n  switch (action.type) {\n    case 'SET_PLAYERS_AMOUNT':\n      return Object.assign({}, state, {playersAmount: action.playersAmount});\n    case 'RESET':\n      return Object.assign({}, initialState, {chosenCards: []});\n    case 'CHANGE_PLAYER_NAME':\n      const playerNames = Object.assign([], state.playerNames);\n      playerNames[action.playerId] = action.playerName;\n      return Object.assign({}, state, {playerNames: playerNames});\n    case 'ADD_POKER_STATISTICS':\n      const winningChances = Object.assign([], action.pokerStatistics.percentages);\n      const histograms = Object.assign([], action.pokerStatistics.histograms);\n      return Object.assign({}, state, {winningChances:winningChances, histograms: histograms});\n    default:\n      return state;\n  }\n}\n","import {combineReducers} from 'redux';\n\nimport cards from './cardReducer';\nimport options from './optionReducer';\n\nconst rootReducer = combineReducers({\n  cards,\n  options\n});\n\nexport default rootReducer;\n","export const calculatePokerStatistics = (playersAmount, pokerTableCards) => {\n  let playersCards = [];\n  let boardCards = [];\n\n  for(let i = 0; i < playersAmount; ++i) {\n    playersCards.push(pokerTableCards[`XF${i + 1}`]);\n    playersCards.push(pokerTableCards[`XS${i + 1}`]);\n  }\n\n  for(let i = 0; i < 5; ++i) {\n    if(!pokerTableCards[`XB${i + 1}`].startsWith('X')) {\n      boardCards.push(pokerTableCards[`XB${i + 1}`]);\n    }\n  }\n\n  return new Promise((resolve, reject) => {\n    fetch('https://dreamerrr.me/poker_calculator/count', {\n      method: 'post',\n      body: JSON.stringify({\n        playersCards: playersCards,\n        boardCards: boardCards\n      })\n    }).then(response => {\n      response.json().then(pokerStatistics => resolve(pokerStatistics));\n    });\n  });\n};\n","export const values = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\nexport const suits = ['S', 'C', 'D', 'H'];\n","export const changeSelection = (pokerTableCards) => {\n  for (var key of Object.keys(pokerTableCards)) {\n    if(pokerTableCards[key].startsWith('X')) {\n      return key;\n    }\n  }\n};\n"]}