{"version":3,"sources":["app/actions.js","app/components/Board.jsx","app/components/Card.jsx","app/components/Player.jsx","app/components/PlayersAmount.jsx","app/container/App.jsx","app/container/CardsBlock.jsx","app/container/Options.jsx","app/container/PokerTable.jsx","app/initialize.js","app/reducer.js","app/utils/cards.js","app/utils/changeSelection.js"],"names":[],"mappings":"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","file":"public/app.js","sourcesContent":["export const setPlayersAmount = (playersAmount) => ({\n  type: 'SET_PLAYERS_AMOUNT',\n  playersAmount\n});\n\nexport const selectCard = (cardName) => ({\n  type: 'SELECT_CARD',\n  cardName\n});\n\nexport const addCardToPokerTable = (selectedCard, cardName) => ({\n  type: 'ADD_CARD_TO_POKER_TABLE',\n  selectedCard,\n  cardName\n});\n","import React from 'react';\n\nimport Card from './Card';\n\nexport default ({pokerTableCards, selectedCard, onSelectCard}) => {\n  return <div className=\"Board\">\n    {[...Array(5)].map((x, i) =>\n      <Card cardName={pokerTableCards[`XB${i + 1}`]} selected={selectedCard} onSelect={onSelectCard} />\n    )}\n  </div>\n}\n","import React from 'react'\n\nexport default React.createClass({\n  propTypes: {\n    cardName: React.PropTypes.string.isRequired,\n    selected: React.PropTypes.string.isRequired,\n    isChosen: React.PropTypes.boolean,\n    onSelect: React.PropTypes.func,\n    addCard: React.PropTypes.func\n  },\n\n  handleClick(selectedCard, cardName) {\n    cardName.startsWith('X') ? this.props.onSelect(cardName) : this.props.addCard(selectedCard, cardName);\n  },\n\n  render() {\n    const cardName = this.props.cardName;\n    const selectedCard = this.props.selected;\n    const isChosen = this.props.isChosen;\n\n    const path = cardName.startsWith('X') ? 'img/cards/X.png' : 'img/cards/' + cardName + '.png';\n    const isSelected = cardName === selectedCard;\n    const className = isChosen ? 'Card-chosen' : (isSelected ? 'Card-selected' : 'Card');\n\n    return <div className={className} onClick={this.handleClick.bind(this, selectedCard, cardName)}>\n      <img src={path} />\n    </div>\n  }\n});\n","import React from 'react';\n\nimport Card from './Card';\n\nexport default ({number, pokerTableCards, selectedCard, onSelectCard}) => {\n  const className = 'Player-' + number;\n  const playerName = 'Player' + number;\n  const cardNameFirst = pokerTableCards['XF' + number];\n  const cardNameSecond = pokerTableCards['XS' + number];\n\n\n  return <div className={className}>\n    <div className=\"Hand\">\n      <Card cardName={cardNameFirst} selected={selectedCard} onSelect={onSelectCard} />\n      <Card cardName={cardNameSecond} selected={selectedCard} onSelect={onSelectCard} />\n    </div>\n    <div className=\"PlayerName\">{playerName}</div>\n  </div>;\n}\n","import React from 'react';\n\nconst playersAmount = [2, 3, 4, 5, 6, 7, 8, 9];\n\nexport default React.createClass({\n  propTypes: {\n    onPlayersAmountChange: React.PropTypes.func.isRequired,\n    playersAmount: React.PropTypes.number.isRequired\n  },\n\n  changePlayersAmount() {\n    const value = this.refs.playersAmount.value;\n    this.props.onPlayersAmountChange(value);\n  },\n\n  render() {\n    return <select ref=\"playersAmount\" value={this.props.playersAmount} onChange={this.changePlayersAmount}>\n      {playersAmount.map(amount => <option key={amount} value={amount}>{amount}</option>)}\n    </select>\n  }\n});\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {selectCard, addCardToPokerTable, chooseCard} from 'actions';\n\nimport CardsBlock from './CardsBlock';\nimport PokerTable from './PokerTable';\nimport Options from './Options';\n\nconst App = React.createClass({\n  render() {\n    return (\n      <div className=\"Container\">\n        <div className=\"CardsAndTable\">\n          <CardsBlock selected={this.props.selectedCard} addCardToPokerTable={this.props.addCardToPokerTable} />\n          <PokerTable selectedCard={this.props.selectedCard} onSelectCard={this.props.onSelectCard} />\n        </div>\n        <div className=\"OptionsAndStatistics\">\n          <Options />\n        </div>\n      </div>\n    );\n  }\n});\n\nconst mapStateToProps = (state) => ({\n  selectedCard: state.selectedCard,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  addCardToPokerTable(selectedCard, cardName) {\n    dispatch(addCardToPokerTable(selectedCard, cardName));\n  },\n\n  onSelectCard(cardName) {\n    dispatch(selectCard(cardName));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport Card from 'components/Card';\nimport {values, suits} from 'utils/cards';\n\nconst CardsBlock = ({selected, chosenCards, addCardToPokerTable}) => {\n  return <div className=\"CardsBlock\">\n    {suits.map(suit => {\n      return <div className=\"CardsBlock-suit\">\n        {values.map(value => {\n          const cardName = value + suit;\n          const isChosen = chosenCards.findIndex(card => card === cardName) > -1;\n          return <Card cardName={cardName} selected={selected} isChosen={isChosen} addCard={addCardToPokerTable} />;\n        })}\n      </div>;\n    })}\n  </div>;\n};\n\nconst mapStateToProps = (state) => ({\n  chosenCards: state.chosenCards\n});\n\nexport default connect(mapStateToProps)(CardsBlock);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {setPlayersAmount} from 'actions';\n\nimport PlayersAmount from 'components/PlayersAmount';\n\nconst Options = ({playersAmount, onPlayersAmountChange}) => {\n  return <div className=\"Options\">\n    <div className=\"PlayersAmount\">\n      <div>Select the amount of players: </div>\n      <div>\n        <PlayersAmount onPlayersAmountChange={onPlayersAmountChange} playersAmount={playersAmount} />\n      </div>\n    </div>\n  </div>;\n};\n\nconst mapStateToProps = (state) => ({\n  playersAmount: state.playersAmount\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onPlayersAmountChange(playersAmount) {\n    dispatch(setPlayersAmount(playersAmount));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Options);\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport Player from 'components/Player';\nimport Board from 'components/Board';\n\nconst PokerTable = ({playersAmount, pokerTableCards, selectedCard, onSelectCard}) => {\n  const amount = parseInt(playersAmount, 10);\n\n  return <div className=\"PokerTable\">\n    {[...Array(amount)].map((x, i) =>\n      <Player number={i + 1} pokerTableCards={pokerTableCards} selectedCard={selectedCard} onSelectCard={onSelectCard} />\n    )}\n    <Board pokerTableCards={pokerTableCards} selectedCard={selectedCard} onSelectCard={onSelectCard} />\n  </div>;\n};\n\nconst mapStateToProps = (state) => ({\n  playersAmount: state.playersAmount,\n  pokerTableCards: state.pokerTableCards\n});\n\nexport default connect(mapStateToProps)(PokerTable);\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\n\nimport reducer from 'reducer';\nimport App from 'container/App';\n\nconst store = createStore(reducer);\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.querySelector('#app')\n  );\n});\n","import {changeSelection} from 'utils/changeSelection';\n\nconst initialState = {\n  playersAmount: 2,\n  selectedCard: 'XF1',\n  pokerTableCards: {\n    'XF1': 'XF1', 'XS1': 'XS1',\n    'XF2': 'XF2', 'XS2': 'XS2',\n    'XF3': 'XF3', 'XS3': 'XS3',\n    'XF4': 'XF4', 'XS4': 'XS4',\n    'XF5': 'XF5', 'XS5': 'XS5',\n    'XF6': 'XF6', 'XS6': 'XS6',\n    'XF7': 'XF7', 'XS7': 'XS7',\n    'XF8': 'XF8', 'XS8': 'XS8',\n    'XF9': 'XF9', 'XS9': 'XS9',\n    'XB1': 'XB1', 'XB2': 'XB2', 'XB3': 'XB3', 'XB4': 'XB4', 'XB5': 'XB5'\n  },\n  chosenCards: []\n};\n\nexport default function(state = initialState, action) {\n  switch (action.type) {\n    case 'SET_PLAYERS_AMOUNT':\n      return Object.assign({}, state, {playersAmount: action.playersAmount});\n    case 'SELECT_CARD':\n      return Object.assign({}, state, {selectedCard: action.cardName});\n    case 'ADD_CARD_TO_POKER_TABLE':\n      const pokerTableCards = Object.assign({}, state.pokerTableCards);\n      pokerTableCards[action.selectedCard] = action.cardName;\n      const selectedCard = changeSelection(pokerTableCards);\n      const chosenCards = state.chosenCards;\n      chosenCards.push(action.cardName);\n      return Object.assign({}, state, {selectedCard:selectedCard, pokerTableCards: pokerTableCards, chosenCards: chosenCards});\n    default:\n      return state;\n  }\n}\n","export const values = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\nexport const suits = ['S', 'C', 'D', 'H'];\n","export const changeSelection = (pokerTableCards) => {\n  for (var key of Object.keys(pokerTableCards)) {\n    if(pokerTableCards[key].startsWith('X')) {\n      return key;\n    }\n  }\n};\n"]}