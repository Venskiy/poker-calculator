{"version":3,"sources":["app/actions.js","app/components/Board.jsx","app/components/Card.jsx","app/components/Combinations.jsx","app/components/Histogram.jsx","app/components/Player.jsx","app/components/PlayerName.jsx","app/components/PlayersAmount.jsx","app/components/PokerTableCard.jsx","app/container/App.jsx","app/container/CardsBlock.jsx","app/container/Options.jsx","app/container/PokerTable.jsx","app/container/Statistics.jsx","app/initialize.js","app/reducer.js","app/utils/cards.js","app/utils/changeSelection.js"],"names":[],"mappings":"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","file":"public/app.js","sourcesContent":["export const setPlayersAmount = (playersAmount) => ({\n  type: 'SET_PLAYERS_AMOUNT',\n  playersAmount\n});\n\nexport const selectCard = (cardName) => ({\n  type: 'SELECT_CARD',\n  cardName\n});\n\nexport const addCardToPokerTable = (cardName) => ({\n  type: 'ADD_CARD_TO_POKER_TABLE',\n  cardName\n});\n\nexport const removeCardFromPokerTable = (cardName) => ({\n  type: 'REMOVE_CARD_FROM_POKER_TABLE',\n  cardName\n});\n\nexport const calculateStatistics = (pokerStatistics) => ({\n  type: 'ADD_POKER_STATISTICS',\n  pokerStatistics\n});\n\nexport const reset = () => ({\n  type: 'RESET'\n});\n\nexport const changePlayerName = (playerId, playerName) => ({\n  type: 'CHANGE_PLAYER_NAME',\n  playerId,\n  playerName\n});\n","import React from 'react';\n\nimport PokerTableCard from './PokerTableCard';\n\nexport default ({pokerTableCards, selectedCard, onSelectCard, removeCard}) => {\n  return <div className=\"Board\">\n    {[...Array(5)].map((x, i) =>\n      <PokerTableCard cardName={pokerTableCards[`XB${i + 1}`]} selected={selectedCard} onSelect={onSelectCard} removeCard={removeCard}/>\n    )}\n  </div>\n}\n","import React from 'react'\n\nexport default React.createClass({\n  propTypes: {\n    cardName: React.PropTypes.string.isRequired,\n    isChosen: React.PropTypes.bool.isRequired,\n    addCard: React.PropTypes.func.isRequired\n  },\n\n  handleClick(cardName) {\n    this.props.isChosen ? alert('This card is already chosen.') : this.props.addCard(cardName);\n  },\n\n  render() {\n    const cardName = this.props.cardName;\n    const className = this.props.isChosen ? 'Card-chosen' : 'Card';\n    const path = `img/cards/${cardName}.png`;\n\n    return <div className={className} onClick={this.handleClick.bind(this, cardName)}>\n      <img src={path} />\n    </div>\n  }\n});\n","import React from 'react';\n\nexport default () => {\n  return <div className=\"Combinations\">\n    <div>Combinations</div>\n    <div>High Card</div>\n    <div>Pair</div>\n    <div>Two Pairs</div>\n    <div>Three of a Kind</div>\n    <div>Straight</div>\n    <div>Flush</div>\n    <div>Full House</div>\n    <div>Four of a Kind</div>\n    <div>Straight Flush</div>\n    <div>Royal Flush</div>\n  </div>\n};\n","import React from 'react';\n\nexport default () => {\n  return <div className=\"Histogram\">\n    Histogram\n  </div>\n};\n","import React from 'react';\n\nimport PokerTableCard from './PokerTableCard';\n\nexport default ({number, playerName, pokerTableCards, selectedCard, onSelectCard, removeCard}) => {\n  const className = `Player-${number}`;\n  const cardNameFirst = pokerTableCards[`XF${number}`];\n  const cardNameSecond = pokerTableCards[`XS${number}`];\n\n  return <div className={className}>\n    <div className=\"Hand\">\n      <PokerTableCard cardName={cardNameFirst} selected={selectedCard} onSelect={onSelectCard} removeCard={removeCard} />\n      <PokerTableCard cardName={cardNameSecond} selected={selectedCard} onSelect={onSelectCard} removeCard={removeCard}/>\n    </div>\n    <div className=\"PlayerName\">{playerName}</div>\n  </div>;\n}\n","import React from 'react';\n\nexport default React.createClass({\n  propTypes: {\n    playerId: React.PropTypes.number.isRequired,\n    playerName: React.PropTypes.string.isRequired,\n    onChangePlayerName: React.PropTypes.func.isRequired\n  },\n\n  handeOnChange(playerName) {\n    const name = this.refs.playerName.value;\n    this.props.onChangePlayerName(this.props.playerId, name);\n  },\n\n  render() {\n    return <input ref=\"playerName\" type=\"text\" value={this.props.playerName} onChange={this.handeOnChange} />\n  }\n});\n","import React from 'react';\n\nconst playersAmount = [1, 2, 3, 4, 5, 6, 7, 8, 9];\n\nexport default React.createClass({\n  propTypes: {\n    playersAmount: React.PropTypes.number.isRequired,\n    onPlayersAmountChange: React.PropTypes.func.isRequired\n  },\n\n  changePlayersAmount() {\n    const value = this.refs.playersAmount.value;\n    this.props.onPlayersAmountChange(value);\n  },\n\n  render() {\n    return <select ref=\"playersAmount\" value={this.props.playersAmount} onChange={this.changePlayersAmount}>\n      {playersAmount.map(amount => <option key={amount} value={amount}>{amount}</option>)}\n    </select>\n  }\n});\n","import React from 'react';\n\nexport default React.createClass({\n  propTypes: {\n    cardName: React.PropTypes.string.isRequired,\n    selected: React.PropTypes.string,\n    onSelect: React.PropTypes.func.isRequired,\n    removeCard: React.PropTypes.func.isRequired\n  },\n\n  handleClick(cardName) {\n    cardName.startsWith('X') ? this.props.onSelect(cardName) : this.props.removeCard(cardName);\n  },\n\n  render() {\n    const cardName = this.props.cardName;\n    const selectedCard = this.props.selected;\n    const isSelected = cardName === selectedCard;\n    const className = isSelected ? 'Card-selected' : (cardName.startsWith('X') ? 'Card' : 'Card-in');\n    const path = cardName.startsWith('X') ? 'img/cards/X.png' : `img/cards/${cardName}.png`;\n\n    return <div className={className} onClick={this.handleClick.bind(this, cardName)}>\n      <img src={path} />\n    </div>\n  }\n});\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {selectCard, addCardToPokerTable, removeCardFromPokerTable} from 'actions';\n\nimport CardsBlock from './CardsBlock';\nimport PokerTable from './PokerTable';\nimport Options from './Options';\nimport Statistics from './Statistics';\n\nconst App = React.createClass({\n  render() {\n    return (\n      <div className=\"Container\">\n        <div className=\"CardsAndTable\">\n          <CardsBlock selectedCard={this.props.selectedCard} addCardToPokerTable={this.props.addCardToPokerTable} />\n          <PokerTable selectedCard={this.props.selectedCard} onSelectCard={this.props.onSelectCard} removeCardFromPokerTable={this.props.removeCardFromPokerTable} />\n        </div>\n        <div className=\"OptionsAndStatistics\">\n          <Options />\n          <Statistics />\n        </div>\n      </div>\n    );\n  }\n});\n\nconst mapStateToProps = (state) => ({\n  selectedCard: state.selectedCard,\n  pokerStatistics: state.pokerStatistics\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onSelectCard(cardName) {\n    dispatch(selectCard(cardName));\n  },\n\n  addCardToPokerTable(cardName, selectedCard) {\n    dispatch(addCardToPokerTable(cardName));\n  },\n\n  removeCardFromPokerTable(cardName) {\n    dispatch(removeCardFromPokerTable(cardName));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport Card from 'components/Card';\nimport {values, suits} from 'utils/cards';\n\nconst CardsBlock = ({selectedCard, chosenCards, addCardToPokerTable}) => {\n  return <div className=\"CardsBlock\">\n    {suits.map(suit => {\n      return <div className=\"CardsBlock-suit\">\n        {values.map(value => {\n          const cardName = value + suit;\n          const isChosen = chosenCards.findIndex(card => card === cardName) > -1;\n          return <Card cardName={cardName} isChosen={isChosen} addCard={addCardToPokerTable} />;\n        })}\n      </div>;\n    })}\n  </div>;\n};\n\nconst mapStateToProps = (state) => ({\n  chosenCards: state.chosenCards\n});\n\nexport default connect(mapStateToProps)(CardsBlock);\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {setPlayersAmount, calculateStatistics, reset, changePlayerName} from 'actions';\n\nimport PlayersAmount from 'components/PlayersAmount';\nimport PlayerName from 'components/PlayerName';\n\nconst Options = ({playersAmount, playerNames, onPlayersAmountChange, calculateStatistics, reset, onChangePlayerName}) => {\n  const amount = parseInt(playersAmount, 10);\n\n  return <div className=\"Options\">\n    <div className=\"PlayersAmount\">\n      Select the amount of players:\n      <PlayersAmount onPlayersAmountChange={onPlayersAmountChange} playersAmount={playersAmount} />\n      <input className=\"btn btn-primary\" type=\"button\" value=\"Count statistcs\" onClick={calculateStatistics} />\n      <input className=\"btn btn-primary\" type=\"button\" value=\"Reset\" onClick={reset} />\n      {[...Array(amount)].map((x, i) =>\n        <PlayerName playerId={i} playerName={playerNames[i]} onChangePlayerName={onChangePlayerName} />\n      )}\n    </div>\n  </div>;\n};\n\nconst mapStateToProps = (state) => ({\n  playersAmount: state.playersAmount,\n  playerNames: state.playerNames\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  onPlayersAmountChange(playersAmount) {\n    dispatch(setPlayersAmount(playersAmount));\n  },\n\n  calculateStatistics() {\n    fetch('https://dreamerrr.me/poker_calculator/count').then(response => {\n      response.json().then(pokerStatistics => dispatch(calculateStatistics(pokerStatistics)));\n    });\n  },\n\n  reset() {\n    dispatch(reset());\n  },\n\n  onChangePlayerName(playerId, playerName) {\n    dispatch(changePlayerName(playerId, playerName));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Options);\n","import React from 'react';\nimport {connect} from 'react-redux';\n\nimport Player from 'components/Player';\nimport Board from 'components/Board';\n\nconst PokerTable = ({playersAmount, playerNames, pokerTableCards, selectedCard, onSelectCard, removeCardFromPokerTable}) => {\n  const amount = parseInt(playersAmount, 10);\n\n  return <div className=\"PokerTable\">\n    {[...Array(amount)].map((x, i) =>\n      <Player number={i + 1} playerName={playerNames[i]} pokerTableCards={pokerTableCards} selectedCard={selectedCard} onSelectCard={onSelectCard} removeCard={removeCardFromPokerTable} />\n    )}\n    <Board pokerTableCards={pokerTableCards} selectedCard={selectedCard} onSelectCard={onSelectCard} removeCard={removeCardFromPokerTable} />\n  </div>;\n};\n\nconst mapStateToProps = (state) => ({\n  playersAmount: state.playersAmount,\n  playerNames: state.playerNames,\n  pokerTableCards: state.pokerTableCards\n});\n\nexport default connect(mapStateToProps)(PokerTable);\n","import React from 'react';\n\nimport Histogram from 'components/Histogram';\nimport Combinations from 'components/Combinations';\n\nexport default () => {\n  return <div className=\"Statistics\">\n    <Combinations />\n    <Histogram />\n    <Histogram />\n    <Histogram />\n    <Histogram />\n    <Histogram />\n    <Histogram />\n    <Histogram />\n    <Histogram />\n    <Histogram />\n  </div>\n};\n","import ReactDOM from 'react-dom';\nimport React from 'react';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\n\nimport reducer from 'reducer';\nimport App from 'container/App';\n\nconst store = createStore(reducer);\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  ReactDOM.render(\n    <Provider store={store}>\n      <App />\n    </Provider>,\n    document.querySelector('#app')\n  );\n});\n","import {changeSelection} from 'utils/changeSelection';\n\nconst initialState = {\n  playersAmount: 1,\n  playerNames: ['Player1', 'Player2', 'Player3', 'Player4', 'Player5', 'Player6', 'Player7', 'Player8', 'Player9'],\n  selectedCard: 'XF1',\n  pokerTableCards: {\n    'XF1': 'XF1', 'XS1': 'XS1',\n    'XF2': 'XF2', 'XS2': 'XS2',\n    'XF3': 'XF3', 'XS3': 'XS3',\n    'XF4': 'XF4', 'XS4': 'XS4',\n    'XF5': 'XF5', 'XS5': 'XS5',\n    'XF6': 'XF6', 'XS6': 'XS6',\n    'XF7': 'XF7', 'XS7': 'XS7',\n    'XF8': 'XF8', 'XS8': 'XS8',\n    'XF9': 'XF9', 'XS9': 'XS9',\n    'XB1': 'XB1', 'XB2': 'XB2', 'XB3': 'XB3', 'XB4': 'XB4', 'XB5': 'XB5'\n  },\n  chosenCards: [],\n  pokerStatistics: {}\n};\n\nexport default function(state = initialState, action) {\n  let pokerTableCards;\n  let chosenCards;\n  let selectedCard;\n  switch (action.type) {\n    case 'SET_PLAYERS_AMOUNT':\n      return Object.assign({}, state, {playersAmount: action.playersAmount});\n    case 'SELECT_CARD':\n      return Object.assign({}, state, {selectedCard: action.cardName});\n    case 'ADD_CARD_TO_POKER_TABLE':\n      pokerTableCards = Object.assign({}, state.pokerTableCards);\n      pokerTableCards[state.selectedCard] = action.cardName;\n      selectedCard = changeSelection(pokerTableCards);\n      chosenCards = state.chosenCards;\n      chosenCards.push(action.cardName);\n      return Object.assign({}, state, {selectedCard: selectedCard, pokerTableCards: pokerTableCards, chosenCards: chosenCards});\n    case 'REMOVE_CARD_FROM_POKER_TABLE':\n      const cardName = action.cardName;\n      pokerTableCards = Object.assign({}, state.pokerTableCards);\n      for (var key of Object.keys(pokerTableCards)) {\n        if(pokerTableCards[key] === cardName) {\n          pokerTableCards[key] = key;\n          selectedCard = key;\n          break;\n        }\n      }\n      chosenCards = state.chosenCards.filter(card => card !== cardName);\n      return Object.assign({}, state, {selectedCard: selectedCard, pokerTableCards: pokerTableCards, chosenCards: chosenCards});\n    case 'ADD_POKER_STATISTICS':\n      return Object.assign({}, state, {pokerStatistics: action.pokerStatistics});\n    case 'RESET':\n      return Object.assign({}, initialState, {chosenCards: []});\n    case 'CHANGE_PLAYER_NAME':\n      const playerNames = Object.assign([], state.playerNames);\n      playerNames[action.playerId] = action.playerName;\n      return Object.assign({}, state, {playerNames: playerNames});\n    default:\n      return state;\n  }\n}\n","export const values = ['2', '3', '4', '5', '6', '7', '8', '9', 'T', 'J', 'Q', 'K', 'A'];\nexport const suits = ['S', 'C', 'D', 'H'];\n","export const changeSelection = (pokerTableCards) => {\n  for (var key of Object.keys(pokerTableCards)) {\n    if(pokerTableCards[key].startsWith('X')) {\n      return key;\n    }\n  }\n};\n"]}